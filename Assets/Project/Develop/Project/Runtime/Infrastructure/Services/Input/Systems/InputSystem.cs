//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/InputActions/InputActionAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

namespace Infrastructure.Services.Input.Systems
{
    public partial class @InputSystem: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputSystem()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionAsset"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""6588b16b-ee4e-48e0-9ff4-dd4f254deb20"",
            ""actions"": [
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""2d129593-d019-4d0b-8cad-6791a59d5b11"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""ef558092-5828-4793-a15c-5e681cfb2bae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Axis"",
                    ""type"": ""Value"",
                    ""id"": ""6ba27975-7391-4a1e-8792-4b8851368c9f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""422465b5-9e94-402d-93e1-e52a0ef1ac89"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""FirefliesHint"",
                    ""type"": ""Button"",
                    ""id"": ""52852290-8d82-4eea-98e6-e9820b50ab91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Crouch"",
                    ""type"": ""Button"",
                    ""id"": ""e3bdd463-4396-4120-9aaa-d32af77d3167"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RearStealth"",
                    ""type"": ""Button"",
                    ""id"": ""c105c6f4-7927-48f9-9164-19a9454d629d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FrontStealth"",
                    ""type"": ""Button"",
                    ""id"": ""986aba24-ce3c-4c6f-8e1d-a4e051ec2b4d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5a401eee-0ca5-418c-b98f-b6ab579542b1"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""bcda9e95-e0c8-41f2-b525-0845077fada2"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""316bc8b9-4f2f-48f4-9996-1d91772411b7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""54398379-493f-49e1-94dc-d54842b3b696"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4a22172a-4367-4c56-84a9-ee2dc964a92c"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4fd4c366-e23b-4437-afd7-753734d0cf75"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axis"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""5e77e2cc-428e-44ea-974e-3645639c504a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""007d04fa-a88e-4aa5-b390-213d2eb963c7"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""14efb355-91e4-40a7-a4e1-1a26499a8b86"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FirefliesHint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f352c43a-2993-4b0d-b314-a69867a2e048"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Mouse & Keyboard"",
                    ""action"": ""Crouch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""2363e590-1c64-4cfe-8920-ceb54872eb34"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RearStealth"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""92dc3b70-4ae2-4f9a-bac0-59f7baa41794"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RearStealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""db182f8b-84ec-4625-8652-4ca83f2dba44"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RearStealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""087bff55-5aba-45fe-8245-9f6902c59cac"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontStealth"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""50e41488-d977-43ff-9c08-e2a3788ec4db"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontStealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""9391934d-f0c7-46be-9265-008ba3fbb686"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FrontStealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""bc09a9e8-c586-4a50-8841-76b3d3971184"",
            ""actions"": [
                {
                    ""name"": ""PointerDown"",
                    ""type"": ""Button"",
                    ""id"": ""84f70ef5-9a4f-41c2-8ce2-2ab07b679644"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PointerMove"",
                    ""type"": ""Value"",
                    ""id"": ""caf4bfc8-5c20-4809-8cde-f758efe1ab71"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ShowSettingsScreen"",
                    ""type"": ""Button"",
                    ""id"": ""5437bb9e-8d93-44b8-a1cf-b6baa0a50133"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ShowMainMenuScreen"",
                    ""type"": ""Button"",
                    ""id"": ""c0f9eb3d-de3a-4380-b60e-acf4538c8636"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0fe2f117-bdcc-4e18-8bca-a4dd362c974f"",
                    ""path"": ""<Pointer>/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerDown"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ac56262a-d41f-47de-aa55-b0f25f1ce0ab"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PointerMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ff5dae6-53b7-43c4-9830-84d97c16b257"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""ShowSettingsScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d73c8dc3-0377-415a-9681-b0baf8ce153b"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""ShowMainMenuScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        },
        {
            ""name"": ""Gamepad"",
            ""bindingGroup"": ""Gamepad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
            // Player
            m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
            m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
            m_Player_Jump = m_Player.FindAction("Jump", throwIfNotFound: true);
            m_Player_Axis = m_Player.FindAction("Axis", throwIfNotFound: true);
            m_Player_Sprint = m_Player.FindAction("Sprint", throwIfNotFound: true);
            m_Player_FirefliesHint = m_Player.FindAction("FirefliesHint", throwIfNotFound: true);
            m_Player_Crouch = m_Player.FindAction("Crouch", throwIfNotFound: true);
            m_Player_RearStealth = m_Player.FindAction("RearStealth", throwIfNotFound: true);
            m_Player_FrontStealth = m_Player.FindAction("FrontStealth", throwIfNotFound: true);
            // UI
            m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
            m_UI_PointerDown = m_UI.FindAction("PointerDown", throwIfNotFound: true);
            m_UI_PointerMove = m_UI.FindAction("PointerMove", throwIfNotFound: true);
            m_UI_ShowSettingsScreen = m_UI.FindAction("ShowSettingsScreen", throwIfNotFound: true);
            m_UI_ShowMainMenuScreen = m_UI.FindAction("ShowMainMenuScreen", throwIfNotFound: true);
        }

        ~@InputSystem()
        {
            Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, InputSystem.Player.Disable() has not been called.");
            Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, InputSystem.UI.Disable() has not been called.");
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Player
        private readonly InputActionMap m_Player;
        private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
        private readonly InputAction m_Player_Interact;
        private readonly InputAction m_Player_Jump;
        private readonly InputAction m_Player_Axis;
        private readonly InputAction m_Player_Sprint;
        private readonly InputAction m_Player_FirefliesHint;
        private readonly InputAction m_Player_Crouch;
        private readonly InputAction m_Player_RearStealth;
        private readonly InputAction m_Player_FrontStealth;
        public struct PlayerActions
        {
            private @InputSystem m_Wrapper;
            public PlayerActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @Interact => m_Wrapper.m_Player_Interact;
            public InputAction @Jump => m_Wrapper.m_Player_Jump;
            public InputAction @Axis => m_Wrapper.m_Player_Axis;
            public InputAction @Sprint => m_Wrapper.m_Player_Sprint;
            public InputAction @FirefliesHint => m_Wrapper.m_Player_FirefliesHint;
            public InputAction @Crouch => m_Wrapper.m_Player_Crouch;
            public InputAction @RearStealth => m_Wrapper.m_Player_RearStealth;
            public InputAction @FrontStealth => m_Wrapper.m_Player_FrontStealth;
            public InputActionMap Get() { return m_Wrapper.m_Player; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
                @Interact.started += instance.OnInteract;
                @Interact.performed += instance.OnInteract;
                @Interact.canceled += instance.OnInteract;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Axis.started += instance.OnAxis;
                @Axis.performed += instance.OnAxis;
                @Axis.canceled += instance.OnAxis;
                @Sprint.started += instance.OnSprint;
                @Sprint.performed += instance.OnSprint;
                @Sprint.canceled += instance.OnSprint;
                @FirefliesHint.started += instance.OnFirefliesHint;
                @FirefliesHint.performed += instance.OnFirefliesHint;
                @FirefliesHint.canceled += instance.OnFirefliesHint;
                @Crouch.started += instance.OnCrouch;
                @Crouch.performed += instance.OnCrouch;
                @Crouch.canceled += instance.OnCrouch;
                @RearStealth.started += instance.OnRearStealth;
                @RearStealth.performed += instance.OnRearStealth;
                @RearStealth.canceled += instance.OnRearStealth;
                @FrontStealth.started += instance.OnFrontStealth;
                @FrontStealth.performed += instance.OnFrontStealth;
                @FrontStealth.canceled += instance.OnFrontStealth;
            }

            private void UnregisterCallbacks(IPlayerActions instance)
            {
                @Interact.started -= instance.OnInteract;
                @Interact.performed -= instance.OnInteract;
                @Interact.canceled -= instance.OnInteract;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Axis.started -= instance.OnAxis;
                @Axis.performed -= instance.OnAxis;
                @Axis.canceled -= instance.OnAxis;
                @Sprint.started -= instance.OnSprint;
                @Sprint.performed -= instance.OnSprint;
                @Sprint.canceled -= instance.OnSprint;
                @FirefliesHint.started -= instance.OnFirefliesHint;
                @FirefliesHint.performed -= instance.OnFirefliesHint;
                @FirefliesHint.canceled -= instance.OnFirefliesHint;
                @Crouch.started -= instance.OnCrouch;
                @Crouch.performed -= instance.OnCrouch;
                @Crouch.canceled -= instance.OnCrouch;
                @RearStealth.started -= instance.OnRearStealth;
                @RearStealth.performed -= instance.OnRearStealth;
                @RearStealth.canceled -= instance.OnRearStealth;
                @FrontStealth.started -= instance.OnFrontStealth;
                @FrontStealth.performed -= instance.OnFrontStealth;
                @FrontStealth.canceled -= instance.OnFrontStealth;
            }

            public void RemoveCallbacks(IPlayerActions instance)
            {
                if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerActions @Player => new PlayerActions(this);

        // UI
        private readonly InputActionMap m_UI;
        private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
        private readonly InputAction m_UI_PointerDown;
        private readonly InputAction m_UI_PointerMove;
        private readonly InputAction m_UI_ShowSettingsScreen;
        private readonly InputAction m_UI_ShowMainMenuScreen;
        public struct UIActions
        {
            private @InputSystem m_Wrapper;
            public UIActions(@InputSystem wrapper) { m_Wrapper = wrapper; }
            public InputAction @PointerDown => m_Wrapper.m_UI_PointerDown;
            public InputAction @PointerMove => m_Wrapper.m_UI_PointerMove;
            public InputAction @ShowSettingsScreen => m_Wrapper.m_UI_ShowSettingsScreen;
            public InputAction @ShowMainMenuScreen => m_Wrapper.m_UI_ShowMainMenuScreen;
            public InputActionMap Get() { return m_Wrapper.m_UI; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
            public void AddCallbacks(IUIActions instance)
            {
                if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
                @PointerDown.started += instance.OnPointerDown;
                @PointerDown.performed += instance.OnPointerDown;
                @PointerDown.canceled += instance.OnPointerDown;
                @PointerMove.started += instance.OnPointerMove;
                @PointerMove.performed += instance.OnPointerMove;
                @PointerMove.canceled += instance.OnPointerMove;
                @ShowSettingsScreen.started += instance.OnShowSettingsScreen;
                @ShowSettingsScreen.performed += instance.OnShowSettingsScreen;
                @ShowSettingsScreen.canceled += instance.OnShowSettingsScreen;
                @ShowMainMenuScreen.started += instance.OnShowMainMenuScreen;
                @ShowMainMenuScreen.performed += instance.OnShowMainMenuScreen;
                @ShowMainMenuScreen.canceled += instance.OnShowMainMenuScreen;
            }

            private void UnregisterCallbacks(IUIActions instance)
            {
                @PointerDown.started -= instance.OnPointerDown;
                @PointerDown.performed -= instance.OnPointerDown;
                @PointerDown.canceled -= instance.OnPointerDown;
                @PointerMove.started -= instance.OnPointerMove;
                @PointerMove.performed -= instance.OnPointerMove;
                @PointerMove.canceled -= instance.OnPointerMove;
                @ShowSettingsScreen.started -= instance.OnShowSettingsScreen;
                @ShowSettingsScreen.performed -= instance.OnShowSettingsScreen;
                @ShowSettingsScreen.canceled -= instance.OnShowSettingsScreen;
                @ShowMainMenuScreen.started -= instance.OnShowMainMenuScreen;
                @ShowMainMenuScreen.performed -= instance.OnShowMainMenuScreen;
                @ShowMainMenuScreen.canceled -= instance.OnShowMainMenuScreen;
            }

            public void RemoveCallbacks(IUIActions instance)
            {
                if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IUIActions instance)
            {
                foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public UIActions @UI => new UIActions(this);
        private int m_MouseKeyboardSchemeIndex = -1;
        public InputControlScheme MouseKeyboardScheme
        {
            get
            {
                if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
                return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
            }
        }
        private int m_GamepadSchemeIndex = -1;
        public InputControlScheme GamepadScheme
        {
            get
            {
                if (m_GamepadSchemeIndex == -1) m_GamepadSchemeIndex = asset.FindControlSchemeIndex("Gamepad");
                return asset.controlSchemes[m_GamepadSchemeIndex];
            }
        }
        public interface IPlayerActions
        {
            void OnInteract(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnAxis(InputAction.CallbackContext context);
            void OnSprint(InputAction.CallbackContext context);
            void OnFirefliesHint(InputAction.CallbackContext context);
            void OnCrouch(InputAction.CallbackContext context);
            void OnRearStealth(InputAction.CallbackContext context);
            void OnFrontStealth(InputAction.CallbackContext context);
        }
        public interface IUIActions
        {
            void OnPointerDown(InputAction.CallbackContext context);
            void OnPointerMove(InputAction.CallbackContext context);
            void OnShowSettingsScreen(InputAction.CallbackContext context);
            void OnShowMainMenuScreen(InputAction.CallbackContext context);
        }
    }
}
